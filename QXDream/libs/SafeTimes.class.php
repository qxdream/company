<?php
/* 
 [QXDream] safeTimes.class.php 2010-02-21
*/
defined('IN_QX') or die('<h1>Forbidden!</h1>');

// ★ ------------------------------------------
// ↓ 作者      踏雪残情
// ★ ------------------------------------------
// ↓ 建立日期  2010-02-21
// ★ ------------------------------------------
// ↓ 更新日期  2010-02-21
// ★ ------------------------------------------
// ↓ 功能      安全次数记录
// ★ ------------------------------------------
// ↓ 版本      ver 1.0
// ★
class safeTimes extends Model {
	/* 例如登录次数和时间的限制：
	 * 1.在通过login函数验证(用户名,密码,验证码,是否禁用)之前，找IP，动作，时间间隔
	 *   没有超过限制，次数超过限制的记录，如果有则不允,许登录，提示过多少时间才能登
	 *   陆。
	 * 2.接着login函数验证不通过，就找该IP和动作的记录，找到的话判断时间间隔，已超过
	 *   限制的，把次数更新为1，时间更新为现在时间，没有超过限制的，把次数加1，时间更
	 *   新为现在的时间；如果没有找到的话，就把IP,动作，时间，数次+1，插入数据库。  
	 * 3.通过了login函数的验证，就把该IP，动作相同或者间隔时间超出限制的数据清除。
	 */
	public $table;           //安全次数表
	public $action;          //动作
	public $max_times;       //同一IP错误登录最大次数
	public $camp_time;       //用来和记录最大错误登录次数的时间作比较的时间
	public $interval;        //间隔时间
	
	/**
	+-----------------------------------------------------------------------
	* 初始化数据
	+-----------------------------------------------------------------------
	* @action  动作标识
	+-----------------------------------------------------------------------
	* 返回值   无
	+-----------------------------------------------------------------------
	*/
	public function __construct() {
		parent::__construct();
	}
	/**
	+-----------------------------------------------------------------------
	* 设置数据
	+-----------------------------------------------------------------------
	* 参数     无
	+-----------------------------------------------------------------------
	* 返回值   无
	+-----------------------------------------------------------------------
	*/
	public function set($action, $max_times = LOGIN_TIMES, $interval = LOGIN_INTERVAL_TIME) {
		$this->table     = DB_PRE . 'safe_times';
		$this->online_ip = $GLOBALS['QXDREAM']['online_ip'];
		$this->action    = $action;
		$this->interval  = $interval;
		$this->camp_time = $GLOBALS['QXDREAM']['timestamp'] - $interval;
		$this->max_times = $max_times;
	}
	/**
	+-----------------------------------------------------------------------
	* 获取次数
	+-----------------------------------------------------------------------
	* 无
	+-----------------------------------------------------------------------
	* 返回值   次数
	+-----------------------------------------------------------------------
	*/
	public function get_times() {
		$data = '';
		$data = $this->fetch("SELECT `times` FROM `{$this->table}` WHERE `action`='{$this->action}' AND `ip`='{$this->online_ip}'");
		return is_array($data) ? $data['times'] : 0;
	}
	/**
	+-----------------------------------------------------------------------
	* 增加记录
	+-----------------------------------------------------------------------
	* 参数     无
	+-----------------------------------------------------------------------
	* 返回值   在规定时间内还允许操作的次数
	+-----------------------------------------------------------------------
	*/
	public function add() {
		$data = '';
		$data = $this->fetch("SELECT `time_at`,`times` FROM `{$this->table}` WHERE `action`='{$this->action}' AND `ip`='{$this->online_ip}'");
		$times = 0;
		if(is_array($data)) {
			$times = $data['time_at'] > $this->camp_time ? $data['times'] + 1 : 1; //超过规定时间(便重新计算)更新为1,否则次数加1,
			$this->query("UPDATE {$this->table} SET `time_at`='{$GLOBALS['QXDREAM']['timestamp']}',`times`='{$times}' WHERE `action`='{$this->action}' AND `ip`='{$this->online_ip}'");
		} else {
			$times = 1;
			$array = array('action' => $this->action, 'ip' => $this->online_ip, 'time_at' => $GLOBALS['QXDREAM']['timestamp'], 'times' => $times);
			$this->insert($this->table, $array);
		}
		$allow_times = 0;
		$allow_times = $this->max_times - $times;
		return $allow_times;
	}
	/**
	+-----------------------------------------------------------------------
	* 初始化数据(时间比数据库里的小,次数比数据库里的大,说明登录限制尚未解除)
	+-----------------------------------------------------------------------
	* 参数     无
	+-----------------------------------------------------------------------
	* 返回值   数组（包括还有多少时间才能再次操作）
	+-----------------------------------------------------------------------
	*/
	public function check() {
		$data = '';
		$data = $this->fetch("SELECT `time_at`,`times` FROM `{$this->table}` WHERE `action`='{$this->action}' AND `ip`='{$this->online_ip}' AND `times`>='{$this->max_times}' AND `time_at`>'{$this->camp_time}'");
		if(!is_array($data)) return FALSE; //没有记录返回假
		$data['minute'] = $this->interval - ($GLOBALS['QXDREAM']['timestamp'] - $data['time_at']); //秒数
		return $data;
	}
	/**
	+-----------------------------------------------------------------------
	* 清空过期数据
	+-----------------------------------------------------------------------
	* 参数     无
	+-----------------------------------------------------------------------
	* 返回值   资源名柄
	+-----------------------------------------------------------------------
	*/
	public function remove() {
		return $this->delete($this->table, "`action`='{$this->action}' AND (`ip`='{$this->online_ip}' OR `time_at`<'{$this->camp_time}')"); //action是用来作标识的
	}
}
?>