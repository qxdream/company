<?php defined('IN_QX') or die('<h1>Forbidden!</h1>');  function file_suffix($filename) { return strtolower(trim(substr(strrchr($filename, '.'), 1))); } function filename_remove_suffix($filename) { $file = ''; $file = pathinfo($filename); return $file['filename']; } function dir_path($path) { if(empty($path)) { return FALSE; } $path = str_replace('\\', '/', $path); if(substr($path, -1) != '/') $path = $path .'/'; return $path; } function dir_create($path) { $dir = explode('/', dir_path($path)); array_pop($dir); $cur_dir = ''; foreach($dir as $k => $v) { $cur_dir .= $v . '/'; if(is_dir($cur_dir)) continue; $result = ''; $result = @mkdir($cur_dir, 0777); if(!is_file($cur_dir . 'index.htm')) file_put_contents($cur_dir . 'index.htm', ' '); if(!$result) { halt("File '", $cur_dir, "' cannot be created!"); return FALSE; } } return TRUE; } function write_log($file, $str) { $handle = fopen($file, 'a'); flock($handle, LOCK_EX); @fwrite($handle, $str); flock($handle, LOCK_UN); @fclose($handle); @chmod($file, 0777); } function show_msg($show = 'operation_success', $url_forward = 'goback', $is_admin = 0, $millisecond = 1500, $is_parent = FALSE, $dynamic = '') { extract($GLOBALS['QXDREAM'], EXTR_SKIP); $l_arr = empty($is_admin) ? $language : $admin_language; if(isset($l_arr[$show])) eval("\$show = \"" . $l_arr[$show] . "\";"); $msg = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=' . DB_CHARSET . '" /><title>' . $l_arr['message_prompt'] . '</title>'; if(defined('IN_ADMIN')) { $msg .= '<link href="' . VIEW_ADMIN_CSS . 'show_msg.css" rel="stylesheet" />'; } else { $msg .= '<style type="text/css">* { margin: 0; padding: 0; }body { font: 12px/1.8 \'ËÎÌå\', Arial, verdana; background: #f9f9f9; }#wrapper { border: 1px solid #ccc; background: #f7f7f7; width: 340px; padding: 5px; position: absolute; top: 20%; left: 50%; margin: -71px 0 0 -175px; padding: 5px; -moz-border-radius: 10px; -webkit-border-radius: 5px; }#in { width: 300px; background: #fff; padding: 10px 20px; overflow: hidden; word-wrap: break-word;  }h1 { font-size: 18px; font-weight: normal; font-family: \'ºÚÌå\'; text-align: center; border-bottom: 1px solid #ccc; margin-bottom: 10px; }#red,a:hover { color: #bc2931; }a { color: #1f3a87; }b { color: #000; }</style>'; } $msg .= '</head><body><div id="wrapper"><div id="in"><h1>' . $l_arr['message_prompt'] . '</h1><p id="red">' . $show . '</p>'; if($url_forward == 'goback') { $msg .= '<a href="javascript:history.go(-1);" >'. $l_arr['message_goback'] . '</a>'; } elseif($url_forward == 'stay') { $msg .= ''; } else { $sec = $millisecond / 1000; eval("\$message_redirect_in_sec = \"" . $l_arr['message_redirect_in_sec'] . "\";"); eval("\$message_click_to = \"" . $l_arr['message_click_to'] . "\";"); $location = $is_parent ? 'parent.location' : 'location'; $msg .= '<script type="text/javascript">setTimeout(function(){' . $location . '.href="' . $url_forward . '"},' . $millisecond . ');</script><p>' . $message_redirect_in_sec . '</p><p>' . $message_click_to . '</p>'; } $msg .= '<p id="exec_info">' . exec_info(0) . '</p>' . $dynamic . '</div></div></body></html>'; exit($msg); } function lang($show, $is_admin = 0) { extract($GLOBALS['QXDREAM'], EXTR_SKIP); $l_arr = empty($is_admin) ? $language : $admin_language; if(isset($l_arr[$show])) eval("\$show = \"" . $l_arr[$show] . "\";"); return $show; } function add_globals($arr) { if(!is_array($arr)) { return FALSE; } foreach($arr as $k => $v) { $GLOBALS['QXDREAM'][$k] = $v; } } function system_error($show, $arr = '') { if(DEBUG) { if(is_array($arr)) { add_globals($arr); } } else { $show = 'page_not_exists'; } show_msg($show); } function halt($show, $arr = '', $debug = DEBUG) { if(empty($debug)) return FALSE; if(is_array($arr)) { add_globals($arr); } show_msg($show, 'stay'); } function exec_info($display_time = 1) { if(IS_SHOW_EXEC_INFO == 0) return FALSE; $runtime_stop = microtime(TRUE);; $runtime = number_format(($runtime_stop - $GLOBALS['QXDREAM']['runtime_start']), 6); $time = empty($display_time) ? '' : 'GMT' . (TIMEOFFSET > 0 ? '+' . TIMEOFFSET : TIMEOFFSET) . ', ' . format_date('Y-m-d H:iA') . ', '; return $time . 'Processed in ' . $runtime .' second(s), ' . $GLOBALS['QXDREAM']['query_num'] . ' queries. ' . user_memory_size(); } function app_root($app_path = '') { return QX_ROOT . APP_DIR . (empty($app_path) ? APP_PATH : $app_path); } function get_entry() { $entry = filename_remove_suffix(basename(PHP_SELF)); return 'index' == $entry && REWRITE ? '' : $entry; } function app_url($entry = '') { return dir_path(QX_PATH . (empty($entry) ? get_entry() : $entry) . (REWRITE ? '' : '.php')); } function load_admin_share() { define('IN_ADMIN', TRUE); $admin_share_action = QX_ROOT . APP_DIR . ADMIN_PATH . 'controllers/ShareAction.class.php'; is_file($admin_share_action) && require_once $admin_share_action; } function load_class($filename, $is_create_class = 1, $is_core = 1) { $filename = ucwords($filename); $file = (1 == $is_core ? QX_ROOT . 'QXDream/' : app_root()) . 'libs/' . $filename . '.class.php'; is_file($file) ? require $file : halt("File '" . $file . "' not exists!"); if(!empty($is_create_class)) { return new $filename(); } } function language($filename) { $language_pack = QX_ROOT . PUBLIC_DIR . 'language/' . LANG_PACK . '/' . $filename . '.lang.php'; if(is_file($language_pack)) { return include $language_pack; } else { halt("Language package '" . $language_pack . "' not exists!"); } } function repair_url() { $path_info_arr = get_path_info(); $path_info_arr[0] = isset($path_info_arr[0]) ? $_GET['control'] : DEFAULT_CONTROL; $path_info_arr[1] = isset($path_info_arr[1]) ? $_GET['method'] : DEFAULT_METHOD; return app_url() . $path_info_arr[0] . '/' . $path_info_arr[1] . '/'; } function get_path_info() { if(!PATH_INFO) return; return explode('/', trim(PATH_INFO, '/')); } function current_url() { return SCHEME . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']; } function my_htmlspecialchars($str) { return is_array($str) ? array_map('my_htmlspecialchars', $str) : htmlspecialchars($str, ENT_QUOTES); } function check_badword($str, $name_key = array("\\",'&',' ',"'",'"','/','*',',','<','>',"\r","\t","\n",'#','`')) { foreach($name_key as $value){ if (strpos($str, $value) !== FALSE) return TRUE; } return FALSE; } function slash($str) { return is_array($str) ? array_map('slash', $str) : addslashes($str); } function unslash($str) { return is_array($str) ? array_map('unslash', $str) : stripslashes($str); } function filter_sql($str) { $search = array('/union(\s*(\/\*.*\*\/)?\s*)+(\(\s*)*select/i', '/load_file(\s*(\/\*.*\*\/)?\s*)+\(/i', '/into(\s*(\/\*.*\*\/)?\s*)+outfile/i'); $replace = array('union &nbsp; \\3 select', 'load_file &nbsp; (', 'into &nbsp; outfile'); return is_array($str) ? array_map('filter_sql', $str) : preg_replace($search, $replace, $str); } function size($bytes) { $arr = array('Byte', 'K', 'M', 'G', 'T', 'P'); $unit = $arr[0]; $count = count($arr); for($i = 1; $i < $count && $bytes > 1024; $i++) { $bytes /= 1024; $unit = $arr[$i]; } return round($bytes, 2) . ' ' . $unit; } function user_memory_size() { return size(memory_get_usage()); } function timezone() { $timeoffset = (TIMEOFFSET > 0 ? '-' : '+') . abs(TIMEOFFSET); if(function_exists('date_default_timezone_set')){ @date_default_timezone_set('Etc/GMT' . $timeoffset); }else{ @ini_set('date.timezone','Etc/GMT' . $timeoffset); } } function format_date($format = '', $timestamp = '', $personality = 1) { if(!empty($personality) && !empty($timestamp)) { $second = time() - $timestamp; $today = get_date('Y-m-d', time()); $yesterday = get_date('Y-m-d', time() - 86400); $two_day_before = get_date('Y-m-d', time() - 172800); $now_date = get_date('Y-m-d', $timestamp); if($now_date == $today) { if($second == 0) return $GLOBALS['QXDREAM']['language']['just']; if($second < 60) return $second . $GLOBALS['QXDREAM']['language']['second_before']; if($second < 3600) return ceil($second / 60) . $GLOBALS['QXDREAM']['language']['minute_before']; if($second < 86400) return ceil($second / 3600) . $GLOBALS['QXDREAM']['language']['hour_before']; } if($now_date == $yesterday) { return $GLOBALS['QXDREAM']['language']['yesterday'] . ' ' . get_date('H:i', $timestamp); } if($now_date == $two_day_before) { return $GLOBALS['QXDREAM']['language']['day_before_yesterday'] . ' ' . get_date('H:i', $timestamp); } } empty($timestamp) && $timestamp = time(); return get_date($format, $timestamp); } function get_date($format, $timestamp = '') { return gmdate($format, $timestamp + TIMEOFFSET * 3600); } function now() { return format_date('Y-m-d H:i:s'); } function datediff($date1, $date2 = '') { if(empty($date2)) $date2 = now(); return abs(ceil((strtotime($date1) - strtotime($date2))/86400)); } function software() { return $_SERVER['SERVER_SOFTWARE']; } function memory_limit($size = 32) { @ini_set('memory_limit', $size . 'M'); } function is_file_uploads() { if(@ini_get('file_uploads')){ return $GLOBALS['QXDREAM']['language']['max_allowed'] . ' <span class="blue">'.ini_get('upload_max_filesize') . '</span>'; }else{ return '<span class="red">' . $GLOBALS['QXDREAM']['language']['banned'] . '</span>'; } } function php_cfg($varname){ switch(get_cfg_var($varname)){ case 0: return '<span class="red">' . $GLOBALS['QXDREAM']['language']['off'] . '</span>'; break; case 1: return '<span class="blue">' . $GLOBALS['QXDREAM']['language']['on'] . '</span>'; break; } } function gd_version(){ if(function_exists('gd_info')){ $arr = gd_info(); return $arr['GD Version']; }else{ return '<span class="red">' . $GLOBALS['QXDREAM']['language']['not_open'] . '</span>'; } } function set_cookie($cookie_name, $cookie_value = '', $expires = 0) { $expires = $expires > 0 ? $expires : 0; $is_security = $_SERVER['SERVER_PORT'] == '443' ? 1 : 0; if(is_array($cookie_name)) { foreach($cookie_name as $k => $v) { setcookie(COOKIE_PRE . $v, $cookie_value[$v], $expires, COOKIE_PATH, COOKIE_DOMAIN, $is_security); } } else { setcookie(COOKIE_PRE . $cookie_name, $cookie_value, $expires, COOKIE_PATH, COOKIE_DOMAIN, $is_security); } } function get_cookie($cookie_name) { $cookie_name = COOKIE_PRE . $cookie_name; return isset($_COOKIE[$cookie_name]) ? $_COOKIE[$cookie_name] : FALSE; } function clear_cookie($cookie_name) { $is_security = $_SERVER['SERVER_PORT'] == '443' ? 1 : 0; if(is_array($cookie_name)) { foreach($cookie_name as $k => $v) { setcookie(COOKIE_PRE . $v, '', time()-24*3600*1000, COOKIE_PATH, COOKIE_DOMAIN, $is_security); } } else { setcookie(COOKIE_PRE . $cookie_name, '', time()-24*3600*1000, COOKIE_PATH, COOKIE_DOMAIN, $is_security); } } function get_ip() { if(getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')) { $online_ip = getenv('HTTP_CLIENT_IP'); } elseif(getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) { $online_ip = getenv('HTTP_X_FORWARDED_FOR'); } elseif(getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) { $online_ip = getenv('REMOTE_ADDR'); } elseif(isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')) { $online_ip = $_SERVER['REMOTE_ADDR']; } $online_ip = addslashes($online_ip); preg_match("/[\d\.]{7,15}/", $online_ip, $online_ip_matches); return isset($online_ip_matches[0]) ? $online_ip_matches[0] : 'unknown'; } function filled_out($form_vars, $skip_vars = '') { !is_array($form_vars) && halt("Parameter '" . $form_vars . "' is not array!"); foreach($form_vars as $k => $v) { if(is_array($v)) { continue; } if(!empty($skip_vars)) { if(is_array($skip_vars) && in_array($k, $skip_vars) || !is_array($skip_vars) && $k == $skip_vars) continue; } $form_vars[$k] = trim($v); if((!isset($v)) || empty($form_vars[$k])) { return FALSE; } } return $form_vars; } function my_trim($form_vars, $skip_vars = '') { !is_array($form_vars) && halt("Parameter '" . $form_vars . "' is not array!"); foreach($form_vars as $k => $v) { if(!empty($skip_vars)) { if(is_array($skip_vars) && in_array($k, $skip_vars) || !is_array($skip_vars) && $k == $skip_vars) continue; } $form_vars[$k] = trim($v); } return $form_vars; } function check_code($code, $enable = 1, $session_code_name = 'check_code') { if(!$enable) return TRUE; if(!isset($_SESSION[$session_code_name])) halt('session code is undefined!'); if(strtolower($code) != strtolower($_SESSION[$session_code_name])) { unset($_SESSION[$session_code_name]); return FALSE; } unset($_SESSION[$session_code_name]); return TRUE; } function auth_code($str, $action = 'ENCODE') { $key = substr(md5(QX_KEY) , 20, 29); $len = strlen($key); $str = $action == 'ENCODE' ? $str : base64_decode($str); $code = ''; for($i = 0; $i < strlen($str); $i++){ $k = $i % $len; $code .= $str[$i] ^ $key[$k]; } $code = $action == 'DECODE' ? $code : base64_encode($code); return $code; } function get_role_name($group_id) { return isset($GLOBALS['QXDREAM']['USER_GROUP'][$group_id]['group_name']) ? $GLOBALS['QXDREAM']['USER_GROUP'][$group_id]['group_name'] : ''; } function format_timespan($seconds = '') { if ($seconds == '') $seconds = 1; $str = ''; $years = floor($seconds / 31536000); if ($years > 0) { $str .= $years.$GLOBALS['QXDREAM']['language']['year'].', '; } $seconds -= $years * 31536000; $months = floor($seconds / 2628000); if ($years > 0 || $months > 0) { if ($months > 0) { $str .= $months.$GLOBALS['QXDREAM']['language']['month'].', '; } $seconds -= $months * 2628000; } $weeks = floor($seconds / 604800); if ($years > 0 || $months > 0 || $weeks > 0) { if ($weeks > 0) { $str .= $weeks.$GLOBALS['QXDREAM']['language']['week'].', '; } $seconds -= $weeks * 604800; } $days = floor($seconds / 86400); if ($months > 0 || $weeks > 0 || $days > 0) { if ($days > 0) { $str .= $days.$GLOBALS['QXDREAM']['language']['day'].', '; } $seconds -= $days * 86400; } $hours = floor($seconds / 3600); if ($days > 0 || $hours > 0) { if ($hours > 0) { $str .= $hours.$GLOBALS['QXDREAM']['language']['hour'].', '; } $seconds -= $hours * 3600; } $minutes = floor($seconds / 60); if ($days > 0 || $hours > 0 || $minutes > 0) { if ($minutes > 0) { $str .= $minutes.$GLOBALS['QXDREAM']['language']['minute'].', '; } $seconds -= $minutes * 60; } if ($str == '') { $str .= $seconds.$GLOBALS['QXDREAM']['language']['second'].', '; } $str = substr(trim($str), 0, -1); return $str; } function cache_read($filename, $suffix = CACHE_FILE_SUFFIX, $filepath = CACHE_PATH) { $file = $filepath . $filename . $suffix; return @include $file; } function cache_write($filename, $array, $suffix = CACHE_FILE_SUFFIX, $filepath = CACHE_PATH) { if(!is_array($array)) halt('Parameter \'' . $array . '\' is not array!'); $file = $filepath . $filename . $suffix; $array = "<?php\nreturn " . var_export($array, TRUE) . "\n?>"; $strlen = file_put_contents($file, $array); @chmod($file, 0777); return $strlen; } function cache_delete($filename, $suffix = CACHE_FILE_SUFFIX, $filepath = CACHE_PATH) { $file = $filepath . $filename . $suffix; return @unlink($file); } function editor($textarea_id = 'content', $toolbar = 'Default', $width = '', $height = '') { $skin_str = defined('IN_ADMIN') ? 'oFCKeditor.skinPlan = "' . ADMIN_PLAN . '";' : ''; $str = ''; if(!defined('LOADEDITOR')) { $str .= '<script type="text/javascript" src="' . SITE_URL . PUBLIC_DIR . 'fckeditor/fckeditor.js"></script>'; define('LOADEDITOR', TRUE); } $str .= '<script type="text/javascript">var sBasePath = "' . SITE_URL . PUBLIC_DIR . 'fckeditor/";var oFCKeditor = new FCKeditor("' . $textarea_id . '") ;oFCKeditor.BasePath = sBasePath;' . $skin_str . 'oFCKeditor.Height = "'.$height.'";oFCKeditor.Width = "'.$width.'"; oFCKeditor.ToolbarSet = "'.$toolbar.'";oFCKeditor.ReplaceTextarea();</script>'; return $str; } function set_config($config) { if(!is_array($config)) return FALSE; $configfile = QX_ROOT . 'config.inc.php'; if(!is_writable($configfile)) show_msg('Please chmod ./config.inc.php to 0777 !'); $pattern = $replacement = array(); foreach($config as $k=>$v) { $k = strtoupper($k); $pattern[$k] = "/define\(\s*['\"]".$k."['\"]\s*,\s*([']?)[^']*([']?)\s*\)/is"; $replacement[$k] = "define('".$k."', \${1}".$v."\${2})"; } $str = file_get_contents($configfile); $str = preg_replace($pattern, $replacement, $str); file_put_contents($configfile, $str); } function nature_val($mixed_var) { $mixed_var = intval($mixed_var); return $number = $mixed_var < 0 ? 0 : $mixed_var; } function get_company_uid($company_id) { return $GLOBALS['QXDREAM']['COMPANY'][$company_id]['company_uid']; } function get_frm_url($para = '') { if('add' == $_GET['method']) { $action_url = get_action_url(); } elseif('edit' == $_GET['method']) { $action_url = get_action_url() . $_GET['control'] . '_id/' . $_GET[$_GET['control'] . '_id'] . '/'; } return $action_url . $para; } function get_action_url() { return app_url() . $_GET['control'] . '/' . $_GET['method'] . '/'; } function check_fields($post_arr, $allowed_fields) { $diff_arr = array_diff(array_keys($post_arr), $allowed_fields); if(count($diff_arr) > 0) { $fields = DEBUG ? '<br /><b>Fields</b>£º' . implode(',', $diff_arr) . '</b>' : ''; show_msg('Sorry, your post exists not allowed field!' . $fields); } } function is_creator($user_id) { if(strstr(CREATOR, ',') && $user_id == CREATOR) return TRUE; $arr = explode(',', CREATOR); if(in_array($user_id, $arr)) return TRUE; } function display_guide($arr, $cur_get_name, $other_get_str = '') { $str = ''; foreach($arr as $k => $v) { if(0 == $v['count']) { continue; } if(isset($_GET[$cur_get_name]) && $_GET[$cur_get_name] == $v['link_val']) { $str .= '<span><b>' . $v['text'] . '</b>(' . $v['count'] . ')</span> | '; } else { $str .= '<a href="' . get_action_url() . $cur_get_name . '/' . $v['link_val'] . '/' . $other_get_str . '">' . $v['text'] . '(' . $v['count'] . ')</a> | '; } } return rtrim($str, ' | '); } function append_where(&$sql_where, $has_where, $field) { return $sql_where .= $has_where ? ' AND ' . $field : ' WHERE ' . $field; } if(DEBUG) { function dump($data) { echo '<pre>'; print_r($data); echo '</pre>'; } } function get_type_name($type) { $arr = array(0 => $GLOBALS['QXDREAM']['admin_language']['content_category'], 1 => '<span class="blue">' . $GLOBALS['QXDREAM']['admin_language']['lonely_page'] . '</span>', 2 => '<span class="red">' . $GLOBALS['QXDREAM']['admin_language']['external_link'] . '</span>'); return $arr[$type]; } function get_template($prefix, $suffix = '.tpl.php') { if(empty($GLOBALS['QXDREAM']['qx_company_uid'])) { return; } $file = VIEW_COMPANY_ROOT . $prefix . '*' . $suffix; $file_data = glob($file); $data = array(); foreach($file_data as $v) { $key = substr(basename($v),0, -strlen($suffix)); $data[$key] = basename($v); } return $data; } function load_company_routing() { require CONTROLLERS_ROOT . 'CompanyAction.class.php'; $arr = explode('_', $_GET['method']); $action = ucwords($arr[0]) . 'Action'; $file = CONTROLLERS_ROOT . 'Company' . $action . '.class.php'; if(!is_file($file)) { system_error('control_file_not_exists', array('control_file' => $file)); } require $file; if(!class_exists('Company' . $action)) { system_error('control_class_not_exists', array('control_class' => 'Company' . $action)); } define('VIEW_PLAN', $_GET['control']); define('VIEW_ROOT', QX_ROOT . APP_DIR . APP_PATH . 'views/' . VIEW_PLAN . '/'); define('VIEW_CSS', QX_PATH . PUBLIC_DIR . 'theme/' . VIEW_PLAN . '/css/'); return $action; } function delete_cat_id($target_id, $delete_id) { return implode(',', array_diff(explode(',', $target_id), explode(',', $delete_id))); } function explode_keyword($str, $number, $split = ',') { return array_values(array_unique(array_slice(array_filter(explode($split, $str)), 0, $number))); } function multi_array_search($needle, $haystack) { while($row = current($haystack)) { if(array_search($needle, $row)) { return $row; } next($haystack); } return FALSE; } function create_img($src, $alt = '', $width = '', $height = '') { $width = empty($width) ? '' : ' width="' . $width . '"'; $height = empty($height) ? '' : ' height="' . $height . '"'; $img = '<img src="' . $src . '" alt="' . $alt . '"' . $width . $height . ' />'; return $img; }   class Mysql{ public $db_host; public $db_user; public $db_password; public $charset; public $database; public $db_pre; public $conn; public $fetch_mode = MYSQL_ASSOC; public $debug = DEBUG; public $is_log = IS_LOG; public $row_num = 0; public function __construct(){ if(isset($GLOBALS['qx_connection'])) { $this->conn = $GLOBALS['qx_connection']; return TRUE; } $this->connect(DB_HOST, DB_USER, DB_PASS, DB_NAME, DB_CHARSET, DB_PRE, DB_PCONNECT); } public function connect($db_host,$db_user, $db_password, $database, $charset, $db_pre = '', $pconnect = 0){ $func = $pconnect == 1 ? 'mysql_pconnect' : 'mysql_connect'; if($this->conn = @$func($db_host, $db_user, $db_password)) { $GLOBALS['qx_connection'] = $this->conn; $this->select_db($database); if($this->mysql_version() > '4.1') { $charset = !empty($charset) && in_array(strtolower($charset), array('gbk', 'big5', 'utf-8')) ? str_replace('-', '', $charset) : $charset; $server_charset = !empty($charset) ? 'character_set_connection=' . $charset . ', character_set_results=' . $charset . ',character_set_client=binary' : ''; $server_charset .= $this->mysql_version() > '5.0.1' ? (empty($server_charset) ? '' : ',') . "sql_mode=''" : ''; !empty($server_charset) && mysql_query("SET {$server_charset}", $this->conn); } } else { $this->halt('No', "Can not connect to MySQL server,please check 'host','user','password' are correct!"); } } public function select_db($database) { if(!@mysql_select_db($database, $this->conn)) $this->halt('No', "Unknown database '" . $database . "'"); $this->database = $database; } public function query($query, $type = '') { $func = 'unbuffered' == $type && function_exists('mysql_unbuffered_query') ? 'mysql_unbuffered_query' : 'mysql_query'; if(!$this->conn) { halt('Cannot find any link identifer!'); } if($result = $func($query, $this->conn)) { $GLOBALS['QXDREAM']['query_num']++; return $result; } else { $this->halt($query); } } public function affected_rows() { return mysql_affected_rows($this->conn); } public function fetch_array($query, $fetch_mode = '') { $mode = empty($fetch_mode) ? $this->fetch_mode : $fetch_mode; return @mysql_fetch_array($query, $mode); } public function fetch_row($query) { return mysql_fetch_row($query); } public function data_seek($query, $row_number) { return mysql_data_seek($query, $row_number); } public function free_result($result) { return @mysql_free_result($result); } public function fetch($query){ $result = $this->query($query); $row = $this->fetch_array($result); $this->free_result($result); return $row; } public function fetch_all($query, $type = ''){ $output = array(); $result = $this->query($query, $type); while($row = $this->fetch_array($result)){ $output[] = $row; } $this->free_result($result); return $output; } public function fetch_all_config($query, $id_column_name, $other_column_name) { $result = $this->query($query); $data = array(); while($row = $this->fetch_array($result)) { $data[$row[$id_column_name]] = $row[$other_column_name]; } $this->free_result($result); return $data; } public function fetch_all_column_key($query, $id_column_name) { $result = $this->query($query); $data = array(); while($row = $this->fetch_array($result)) { $data[$row[$id_column_name]] = $row; } $this->free_result($result); return $data; } public function fetch_all_id($query, $id_column_name) { $result = $this->query($query); $data = array(); while($row = $this->fetch_array($result)) { $data[] = $row[$id_column_name]; } $this->free_result($result); return $data; } public function result($query, $field = 0) { $query = $this->query($query, 'unbuffered'); $data = $this->fetch_row($query, $field); $this->free_result($query); return isset($data[$field]) ? $data[$field] : FALSE; } public function last_insert_id(){ $recent_id = mysql_insert_id($this->conn); return $recent_id; } public function num_rows($query){ $total = mysql_num_rows($query); return $total; } public function get_fields($table) { $fields_array = array(); $result = $this->query('SHOW COLUMNS FROM `' . $table . '`', 'unbuffered'); while($row_array = $this->fetch_array($result)) { $fields_array[] = $row_array['Field']; } $this->free_result($result); return $fields_array; } private function check_fields($table, $array) { if(!is_array($array)) halt('Parameter \'' . $array . '\' is not array!'); $fields_array = $this->get_fields($table); foreach($array as $k => $v) { if(!in_array($k, $fields_array)) { if($this->debug) { $this->halt('No', 'Field \'' . $k . '\' not exists in table \'' . $table . '\''); } else { unset($array[$k]); } } } return $array; } public function insert($table, $array) { $array = $this->check_fields($table, $array); return $this->query("INSERT INTO `{$table}` (`" . implode('`,`', array_keys($array)) . "`) VALUES ('" .implode("','", $array) . "')"); } public function insert_multiple($table, $array) { $value_multi = ''; foreach($array as $k => $v) { if(!is_array($v)) return; $value_multi .= "('" . implode("','", $v) . "'),"; } $this->check_fields($table, $v); $value_multi = rtrim($value_multi, ','); return $this->query('INSERT INTO `' . $table . '` (`' . implode('`,`', array_keys($v)) . "`) VALUES " . $value_multi); } public function update($table, $array, $where = '') { $this->check_fields($table, $array); if($where) { $sql = ''; foreach($array as $k => $v) { $sql .= "`{$k}`='{$v}',"; } $sql = rtrim($sql,','); $sql = 'UPDATE `' . $table . '` SET ' . $sql . ' WHERE ' . $where; } else { $sql = "REPLACE INTO `{$table}` (`" . implode('`,`', array_keys($array)) . "`) VALUES ('" .implode("','", $array) . "')"; } return $this->query($sql); } public function delete($table, $where = '') { if(!empty($where)) $where = ' WHERE ' . $where;; return $this->query('DELETE FROM `' . $table . '`' . $where); } public function get_primary($table) { $fields_array = array(); $result = $this->query('SHOW COLUMNS FROM `' . $table . '`', 'unbuffered'); while($row_array = $this->fetch_array($result)) { if($row_array['Key'] == 'PRI') break; } $this->free_result($result); return $row_array['Field']; } public function num_tables(){ $result = mysql_list_tables($this->database); $data = array(); while($row = $this->fetch_array($result, MYSQL_NUM)) { if(preg_match("/^" . $this->db_pre . "/", $row[0])) $data[] = $row[0]; } $this->free_result($result); return count($data); } public function fetch_tables(){ $result = mysql_list_tables($this->database); $i = 0; $table = ''; while($i < mysql_num_rows($result)){ $table = mysql_tablename($result,$i); if(preg_match("/^" . $this->db_pre . "/", $table)) $table_name[] = $table; $i++; } $this->free_result($result); return $table_name; } public function mysql_version() { return mysql_get_server_info($this->conn); } public function error() { return $this->conn ? mysql_error($this->conn) : mysql_error(); } public function errno() { return intval($this->conn ? mysql_errno($this->conn) : mysql_errno()); } public function mysql_runtime() { $query = $this->query('SHOW STATUS'); while($row = $this->fetch_array($query)) { if (preg_match("/^uptime/i", $row['Variable_name'])) return $row['Value']; } } public function close() { mysql_close($this->conn); } public function halt($query = '', $prompt = ''){ if($this->is_log == 1 && $query){ $log_file = QX_ROOT . PUBLIC_DIR . 'data/logs/dberror_log.php'; $str = "<?php exit('Access Denied');?>\t"; $str .= $GLOBALS['QXDREAM']['timestamp'] . "\t"; $str .= $GLOBALS['QXDREAM']['online_ip'] . "\t"; $require = !empty($_SERVER['QUERY_STRING']) ? '?' . $_SERVER['QUERY_STRING'] : ''; $str .= basename($_SERVER['PHP_SELF']) . $require . "\t"; $str .= $this->error() . " on line " . $this->errno() . "\t"; $str .= str_replace(array("\r", "\n", "\t"), array(' ', ' ', ' '), trim(htmlspecialchars($query))) . "\n"; write_log($log_file, $str); } if(empty($this->debug)) return FALSE; $prompt = empty($prompt) ? $this->error() : $prompt; echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=gbk" /><title>Sorry,MySQL Error!</title><style type="text/css">#m_wrapper * { margin: 0; padding: 0; }#m_wrapper { font: 12px/1.5 "Courier New", Courier, monospace; border: 1px solid #ccc; background: #f7f7f7; width: 720px; position: absolute;  left: 50%; margin: 80px 0 0 -360px; padding: 5px; -moz-border-radius: 10px; -webkit-border-radius: 5px; }#m_wrapper #in { width: 680px; background: #fff; padding: 10px 20px; overflow: hidden; }#m_wrapper h1 { font-size: 18px; font-family: verdana; text-align: center; border-bottom: 1px solid #ccc; margin-bottom: 10px; }#m_wrapper b { float: left; width: 50px; }#m_wrapper p { overflow: hidden; height: 1%; }#m_wrapper p span { float: left; width: 630px; }#m_wrapper b,#m_wrapper #err { font-weight: normal; color: #d30000; }#m_wrapper #err { font-weight: bold; font: 24px/1.0 Arial; }</style></head><body><div id="m_wrapper"><div id="in"><h1><span id="err">&hearts;</span>MySQL Error</h1><p><b>SQL: </b><span>' . $query . '</span></p><p><b>Error: </b><span>' . $prompt . '</span></p><p><b>Errno: </b><span> line ' . $this->errno() . '</span></p><p><b>File: </b><span>' . PHP_SELF. '</span></p></div></div></body></html>'; exit(); } }   class Controller { private $control; private $method; protected $view; public function __construct() { $this->view = new View(); if(method_exists($this, '_initialize')) { $this->_initialize(); } } public function __call($func, $args) { system_error('method_not_exists', array('method' => $func)); } private function init() { define('HTTP_REFERER', isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : ''); define('SCHEME', $_SERVER['SERVER_PORT'] == '443' ? 'https://' : 'http://'); define('SITE_URL', SCHEME . $_SERVER['HTTP_HOST'] . QX_PATH); header('Content-Type: text/html; charset=' . DB_CHARSET); session_cache_limiter('private, must-revalidate'); session_start(); ob_start(); timezone(); if(get_cfg_var('memory_limit') < '32M') memory_limit(); $GLOBALS['QXDREAM']['online_ip'] = get_ip(); $GLOBALS['QXDREAM']['timestamp'] = time(); $GLOBALS['QXDREAM']['language'] = language('QXDream'); $GLOBALS['QXDREAM']['query_num'] = 0; $GLOBALS['QXDREAM']['COMPANY_UID'] = cache_read('company_uid'); if(APP_PATH != ADMIN_PATH && defined('IN_ADMIN')) { } else { $share_action = CONTROLLERS_ROOT . 'ShareAction.class.php'; is_file($share_action) && require_once $share_action; } } public function run() { $this->init(); $this->build_url(); $this->control = ucwords($this->control) . 'Action'; $control_file = CONTROLLERS_ROOT . $this->control . '.class.php'; if(!is_file($control_file)) { system_error('control_file_not_exists', array('control_file' => $control_file)); } require $control_file; if(!class_exists($this->control)) { system_error('control_class_not_exists', array('control_class' => $this->control)); } $instance = new $this->control(); $method = $this->method; if(!method_exists($instance, $method)) { system_error('method_not_exists', array('method' => $method)); } if(!defined('VIEW_PLAN')) { define('VIEW_PLAN', 'default'); define('VIEW_ROOT', QX_ROOT . APP_DIR . APP_PATH . 'views/' . VIEW_PLAN . '/'); define('VIEW_CSS', QX_PATH . PUBLIC_DIR . 'theme/' . VIEW_PLAN . '/css/'); } $instance->$method(); } private function build_url() { $url_data = array(); $path_info_array = get_path_info(); $this->control = isset($path_info_array[0]) ? $path_info_array[0] : ''; $this->method = isset($path_info_array[1]) ? $path_info_array[1] : ''; $url_data['control'] = $this->control = !empty($this->control) ? $this->control : DEFAULT_CONTROL; $url_data['method'] = $this->method = !empty($this->method) ? $this->method : DEFAULT_METHOD; if(in_array($this->method, array('__construct', 'init', 'run', 'build_url', 'load_model', '_initialize'))) { show_msg('invalid_request', 'stay'); } $count = count($path_info_array); for($i = 2; $i < $count; $i = $i + 2) { $val = $i + 1; if(!isset($path_info_array[$val])) { continue; } $url_data[$path_info_array[$i]] = $path_info_array[$val]; } if(isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING'])) { parse_str($_SERVER['QUERY_STRING'], $pair_arr); $url_data = array_merge($url_data, array_filter($pair_arr)); $other_para = ''; foreach($url_data as $k => $v) { if('control' == $k || 'method' == $k) { continue; } $other_para .= $k . '/' . $v . '/'; } redirect(app_url() . $this->control . '/' . $this->method . '/' . $other_para); } $_GET = $url_data; if($_REQUEST) { if(!get_magic_quotes_gpc()) { $_POST = slash($_POST); $_GET = slash($_GET); $_COOKIE = slash($_COOKIE); } $_POST = filter_sql($_POST); $_GET = filter_sql($_GET); $_COOKIE = filter_sql($_COOKIE); } } protected function load_model($model_class) { $class = ucwords($model_class) . 'Model'; $model_file = MODELS_ROOT . $class . '.class.php'; if(!is_file($model_file)) { system_error('model_file_not_exists', array('model_file' => $model_file)); } require $model_file; if(!class_exists($class)) { system_error('model_class_not_exists', array('model_class' => $class)); } $model = new $class(); return $model; } }   class Model extends Mysql { public $pagenation; public $msg; public function __construct() { parent::__construct(); if(method_exists($this, '_initialize')) { $this->_initialize(); } } public function count($sql) { return empty($this->pagenation->page_size) ? FALSE : $this->pagenation->row_total = $this->result($sql); } public function db_size() { $size = 0; $query = $this->query("SHOW TABLE STATUS LIKE '" . DB_PRE . "%'", 'SILENT'); while($row = $this->fetch_array($query)) { $size += $row['Data_length'] + $row['Index_length']; } return $size = $size ? size($size) : 'unknow'; } public function cache_table($table, $append = '', $fields = '*', $order_field = '', $asc_desc = 'ASC', $where = '', $is_line = 0, $number = 0) { $arr = array(); if(preg_match("/^" . DB_PRE ."(.*)$/", $table, $arr)) { $remove_pre_table = $arr[1]; unset($arr); } else { $remove_pre_table = $table; $table = DB_PRE . $table; } $primary_key = $this->get_primary($table); $cache_data = array(); $append = empty($append) ? '' : $append . '_'; $order_field = empty($order_field) ? $primary_key : $order_field; $query = $this->query("SELECT {$fields} FROM `{$table}`" . (empty($where) ? '' : " WHERE {$where}") . " ORDER BY {$order_field} {$asc_desc}" . ($number > 0 ? " LIMIT 0,{$number}" : ''), 'unbuffered'); while($data = $this->fetch_array($query)) { if(isset($data['setting']) && !empty($data['setting'])) { $setting = $data['setting']; eval("\$setting = $setting;"); unset($data['setting']); $data = array_merge($data, $setting); } $cache_data[$data[$primary_key]] = $data; if(!empty($is_line)) cache_write($append . $remove_pre_table . '_' . $data[$primary_key], $data); } cache_write($append . $remove_pre_table, $cache_data); } public function cache_module_resource() { $query = $this->query("SELECT * FROM " . DB_PRE . 'module_resource ORDER BY list_order ASC, mr_id ASC', 'unbuffered'); $cache_mr_data = array(); while($data = $this->fetch_array($query)) { $cache_mr_data[$data['mr_name']] = $data; } cache_write('module_resource', $cache_mr_data); } public function cache_company() { $query = $this->query("SELECT company_id,company_uid,company_name,mr_ids,disabled FROM " . DB_PRE . 'company ORDER BY company_id ASC', 'unbuffered'); $cache_company_data = $cache_company_uid_data = array(); while($data = $this->fetch_array($query)) { $cache_company_data[$data['company_id']] = $data; $cache_company_uid_data[$data['company_uid']] = $data['company_id']; } cache_write('company', $cache_company_data); cache_write('company_uid', $cache_company_uid_data); } public function cache_user_group($company_id) { if(0 == $company_id) { $append = ''; $fields = 'group_id,group_name,mr_ids,is_system,is_super'; $where = "company_id='" . $company_id . "'"; } else { $append = $company_id; $fields = 'group_id,group_name,mr_ids,is_system'; $where = "company_id IN(0," . $company_id . ") AND is_super=0"; } $this->cache_table('user_group', $append, $fields, 'group_id', 'ASC', $where); } public function cache_model() { $this->cache_table('model'); } public function cache_model_field($model_id = '') { if(!empty($model_id)) { $this->cache_table('model_field', $model_id, '*', 'list_order', 'ASC', "model_id='" . $model_id . "'"); } else { $query = $this->query("SELECT * FROM " . DB_PRE . "model_field ORDER BY model_id ASC,list_order ASC,field_id ASC", 'unbuffered'); $cache_mf_data = array(); $temp_model_id = -1; $i = 0; while($row = $this->fetch_array($query)) { if(-1 != $temp_model_id && $temp_model_id != $row['model_id']) { cache_write($temp_model_id . '_model_field', $cache_mf_data[$i]); $cache_mf_data[++$i][] = $row; } else { $cache_mf_data[$i][] = $row; } $temp_model_id = $row['model_id']; } if(-1 != $temp_model_id) { cache_write($temp_model_id . '_model_field', $cache_mf_data[$i]); } } } public function cache_category($company_id) { $this->cache_table('category', $company_id, '*', 'list_order,cat_id', 'ASC', "company_id='" . $company_id . "'"); } public function cache_page_id($company_id) { $query = $this->query("SELECT content_id,cat_id FROM " . DB_PRE . "content_page WHERE `company_id`='{$this->company_id}' ORDER BY cat_id ASC", 'unbuffered'); $cache_page_data = array(); while($data = $this->fetch_array($query)) { $cache_page_data[$data['cat_id']] = $data['content_id']; } cache_write($company_id . '_page', $cache_page_data); } public function cache_all($company_id = -100, $read = FALSE) { $this->cache_company(); if($read) { $GLOBALS['QXDREAM']['COMPANY_UID'] = cache_read('company_uid'); } if($company_id < 0) { $company_id = isset($GLOBALS['QXDREAM']['qx_company_id']) && $GLOBALS['QXDREAM']['qx_company_id'] >= 0 ? $GLOBALS['QXDREAM']['qx_company_id'] : 0; } $this->cache_module_resource(); $this->cache_user_group($company_id); if(0 == $company_id) { $this->cache_model(); $this->cache_model_field(); } else { $this->cache_category($company_id); } } public function cache_delete_company($company_id) { cache_delete($company_id . '_user_group'); } public function cache_delete_model_field($model_id) { cache_delete($model_id . '_model_field'); } public function cache_delete_category($company_id) { cache_delete($company_id . '_category'); } public function cache_delete_page($company_id) { cache_delete($company_id . '_page'); } public function get_setting($table, $where) { $data = $this->fetch("SELECT `setting` FROM `" . $table . "` WHERE " . $where); $setting = $data['setting']; if(!empty($setting)) eval("\$setting = $setting;"); return $setting; } public function set_setting($table, $setting_arr, $where) { if(!is_array($setting_arr)) return FALSE; $setting_arr = unslash($setting_arr); $setting = addslashes(var_export($setting_arr, TRUE)); return $this->query("UPDATE `". $table . "` SET `setting`='" . $setting . "' WHERE " . $where); } public function msg($is_admin = 0) { return $GLOBALS['QXDREAM'][(0 == $is_admin ? 'language' : 'admin_language')][$this->msg]; } }   class View { public $view_dir; public $suffix = '.tpl.php'; protected $vars = array(); protected $filename; protected $app_name; protected function get_tpl_file() { if(defined('IN_ADMIN')) { $this->view_dir = empty($this->app_name) ? QX_ROOT . APP_DIR . APP_PATH . 'views/' : QX_ROOT . APP_DIR . $this->app_name . '/views/'; } else { $this->view_dir = empty($this->app_name) ? QX_ROOT . APP_DIR . APP_PATH . 'views/' . VIEW_PLAN : QX_ROOT . APP_DIR . $this->app_name . '/views/' . VIEW_PLAN; } $view_dir = dir_path($this->view_dir); return $view_dir . $this->filename . $this->suffix; } public function assign($tpl_var, $data) { $this->vars[$tpl_var] = $data; } public function display($filename = '', $app_name = '') { $this->filename = empty($filename) ? $_GET['control'] . '_' . $_GET['method'] : $filename; $this->app_name = $app_name; $view_file = $this->get_tpl_file(); if(!is_file($view_file)) { system_error('tpl_file_not_exists', array('view_file' => $view_file)); } extract($this->vars); extract($GLOBALS['QXDREAM'], EXTR_SKIP); include $view_file; } }   class Pagenation { public $row_total; public $page_total; public $page_size; public $page_current; public $page_para; public $is_page_number = 1; public $page_number_show = 6; public $page_number_omitted = 1; public $data_arr; public $url; public $content_page_split = '[page]'; public $anchor = ''; public function list_init($page_size = 20, $other_para = ''){ $this->page_size = $page_size; if(empty($page_size)) { $this->row_total = 0; return FALSE; } $this->other_para = $other_para; $this->page_para = 'p'; } public function get_row_total(){ return $this->row_total; } public function get_page_total(){ return $this->page_total = ceil($this->get_row_total()/$this->page_size); } public function get_page_current(){ if(!isset($_GET["$this->page_para"]) || (int)$_GET["$this->page_para"] <= 0){ return $this->page_current = 1; }elseif((int)$_GET["$this->page_para"] > $this->get_page_total()){ return $this->page_current = $this->get_page_total(); }else{ return $this->page_current = (int)$_GET["$this->page_para"]; } } public function sql_limit(){ if(empty($this->page_size)) { return ''; } $page = 0; $page = ($this->get_page_current() - 1) * $this->page_size; if($page <= 0) $page = 0; $page .= ','; return $limit = ' LIMIT ' . $page . ' ' . $this->page_size; } public function menu_page(){ if($this->get_row_total()>$this->page_size){ $prevpage = ($this->get_page_current() - 1) <= 0 ? 1 : $this->get_page_current() - 1; $nextpage = ($this->get_page_current() + 1) > $this->get_page_total() ? $this->get_page_total() : $this->get_page_current() + 1; if($this->is_page_number) { $prevpages = ($this->get_page_current() - $this->page_number_show / 2) <= 0 ? 1 : $this->get_page_current() - $this->page_number_show / 2; $nextpages = ($this->get_page_current() + $this->page_number_show / 2 - 1) > $this->get_page_total() ? $this->get_page_total() : $this->get_page_current() + $this->page_number_show / 2 - 1; } if(!empty($this->other_para)) { dir_path($this->other_para); } $url_str = preg_replace("/\/" . $this->page_para . "\/[^\/]*\//", '/', repair_url() . $this->other_para) . $this->page_para; $page_nav = ''; if(!$this->is_page_number || !$this->page_number_omitted) { if($this->get_page_current() == 1) { $page_nav = '<span class="page_disabled page_text page_first">First</span>'; } else { $page_nav = '<span class="page_link page_text page_first"><a href="' . $url_str . '/1/' . $this->anchor . '">First</a></span>'; } } if($this->get_page_current() == 1) { $page_nav .= '<span class="page_disabled page_text page_prev">Previous</span>'; } else { $page_nav .= '<span class="page_link page_text page_prev"><a href="' . $url_str . '/' . $prevpage . '/' . $this->anchor . '">Previous</a></span>'; } if($this->is_page_number) { if($this->page_number_omitted) { if($prevpages > 2) { $page_nav .= '<span class="page_num"><a href="' . $url_str . '/1/' . $this->anchor . '">1</a></span><span class="page_ommit">...</span>'; } elseif($prevpages == 2) { $page_nav .= '<span class="page_num"><a href="' . $url_str . '/1/' . $this->anchor . '">1</a></span>'; } } for($i=$prevpages;$i<=$this->get_page_current()-1;$i++){ $page_nav .= '<span class="page_num"><a href="' . $url_str . '/' . $i . '/' . $this->anchor . '">' . $i . '</a></span>'; } $page_nav .= '<strong class="page_current">' . $this->get_page_current() . '</strong>'; for($i=$this->get_page_current()+1;$i<=$nextpages;$i++){ $page_nav .= '<span class="page_num"><a href="' . $url_str . '/' . $i . '/' . $this->anchor . '">' . $i . '</a></span>'; } if($this->page_number_omitted) { if($nextpages == ($this->get_page_total() - 1)) { $page_nav .= '<span class="page_num"><a href="' . $url_str . '/' . $this->get_page_total() . '/' . $this->anchor . '">' . $this->get_page_total() . '</a></span>'; } elseif($nextpages < ($this->get_page_total() - 1)) { $page_nav .= '<span class="page_ommit">...</span><span class="page_num"><a href="' . $url_str . '/' . $this->get_page_total() . '/' . $this->anchor . '">' . $this->get_page_total() . '</a></span>'; } } } if($this->get_page_current() == $this->get_page_total()) { $page_nav .= '<span class="page_disabled page_text page_next">Next</span>'; } else { $page_nav .= '<span class="page_link page_text page_next"><a href="' . $url_str . '/' . $nextpage . '/' . $this->anchor . '">Next</a></span>'; } if(!$this->is_page_number || !$this->page_number_omitted) { if($this->get_page_current() == $this->get_page_total()) { $page_nav .= '<span class="page_disabled page_text page_last">Last</span>'; } else { $page_nav .= '<span class="page_link page_text page_last"><a href="' .$url_str . '/' . $this->get_page_total() . '/' . $this->anchor . '">Last</a></span>'; } } return $page_nav; } } public function page_normal() { $total = $this->get_row_total(); if(empty($total)) return FALSE; $language = $GLOBALS['QXDREAM']['language']; return $page_style = $language['page_all'] . $this->get_row_total() . $language['page_record_display'] . $this->page_size . $language['page_current'] . $this->get_page_current() . $language['page_current_end'] . $this->get_page_total() . $language['page'] . ' ' . $this->menu_page(); } public function page_list($data_arr) { $page = 0; $this->row_total = count($data_arr); $page = ($this->get_page_current() - 1) * $this->page_size; return array_slice($data_arr, $page, $this->page_size); } public function content($content, $other_para, $page_para='page') { $this->page_size = 1; $this->other_para = $other_para; $this->data_arr = $this->content_deal($content); $this->page_para = $page_para; return $this->data_arr[$this->get_page_current() - 1]; } private function content_deal($content) { $data = explode('[page]', $content); foreach($data as $k => $v) { if(empty($v)) unset($data[$k]); } $data = array_values($data); return $data; } public function page_content() { $this->is_page_number = 1; $this->page_number_omitted = 1; return $this->menu_page(); } }   class User extends Model { public $user_table; public $total = 0; public $error_type = 0; public function _initialize() { if(empty($GLOBALS['QXDREAM']['COMPANY_UID'])) { $this->cache_all(-100, TRUE); } $GLOBALS['QXDREAM']['COMPANY'] = cache_read('company'); $GLOBALS['QXDREAM']['MR'] = cache_read('module_resource'); $GLOBALS['QXDREAM']['MODEL'] = cache_read('model'); $this->set(); } public function set() { $this->user_table = DB_PRE . 'user'; } public function check_user() { $qx_auth = get_cookie('qx_auth'); $hash = get_cookie('hash'); if(!empty($qx_auth)) { list($GLOBALS['QXDREAM']['qx_user_id'], $qx_user_pass, $GLOBALS['QXDREAM']['qx_login_count']) = explode("\t", auth_code($qx_auth, 'DECODE')); $data = ''; $data = $this->fetch("SELECT `user_id`,`company_id`,`company_uid`,`user_pass`,`user_name`,`login_ip`,`login_time`,`group_id`,`salt`,`disabled` FROM `{$this->user_table}` WHERE `user_id`='" . $GLOBALS['QXDREAM']['qx_user_id'] . "'"); if(is_array($data) && auth_code($hash, 'DECODE') == md5(md5(QX_KEY) . $data['user_id'] . $data['group_id'] .$data['user_name']) && $data['user_pass'] == $qx_user_pass) { if($data['group_id'] > 1) { $company_data = $GLOBALS['QXDREAM']['COMPANY'][$data['company_id']]; $this->check_company_disabled($company_data) && show_msg('company_disabled'); $GLOBALS['QXDREAM']['qx_company_id'] = $data['company_id']; $GLOBALS['QXDREAM']['qx_mr_ids'] = $company_data['mr_ids']; unset($company_data); $GLOBALS['QXDREAM']['USER_GROUP'] = cache_read($GLOBALS['QXDREAM']['qx_company_id'] . '_user_group'); $GLOBALS['QXDREAM']['CATEGORY'] = cache_read($GLOBALS['QXDREAM']['qx_company_id'] . '_category'); define('VIEW_COMPANY_ROOT', QX_ROOT . APP_DIR . 'company/views/' . $data['company_uid'] . '/'); define('VIEW_COMPANY_CSS', QX_PATH . PUBLIC_DIR . 'theme/' . $data['company_uid'] . '/css/'); } else { $GLOBALS['QXDREAM']['qx_company_id'] = 0; $GLOBALS['QXDREAM']['USER_GROUP'] = cache_read('user_group'); } $GLOBALS['QXDREAM']['qx_user_name'] = $data['user_name']; $GLOBALS['QXDREAM']['qx_group_id'] = $data['group_id']; $GLOBALS['QXDREAM']['qx_disabled'] = $data['disabled']; $GLOBALS['QXDREAM']['qx_login_ip'] = $data['login_ip']; $GLOBALS['QXDREAM']['qx_login_time'] = format_date('Y-m-d H:i:s', $data['login_time']); $GLOBALS['QXDREAM']['qx_company_uid'] = $data['company_uid']; $GLOBALS['QXDREAM']['qx_role'] = get_role_name($data['group_id']); } else { $GLOBALS['QXDREAM']['qx_user_id'] = 0; $GLOBALS['QXDREAM']['qx_group_id'] = -100; $GLOBALS['QXDREAM']['qx_company_id'] = -100; $GLOBALS['QXDREAM']['qx_mr_ids'] = ''; set_cookie(array('hash', 'qx_auth'), array('', '')); } } } public function check_company_disabled($company_data) { return !empty($company_data['disabled']) ? TRUE : FALSE; } public function check_admin() { $this->check_user(); $entry = defined('IN_ADMIN') && APP_PATH != ADMIN_PATH ? str_replace(array('.', '/'), '', ADMIN_PATH) : ''; if(empty($GLOBALS['QXDREAM']['qx_user_id']) || !isset($_SESSION['is_admin']) || !$this->check_group($GLOBALS['QXDREAM']['qx_group_id'])) { $_GET['control'] != 'login' && redirect(app_url($entry) . 'login/'); } else { $_GET['control'] == 'login' && $_GET['method'] != 'logout' && redirect(app_url($entry)); $overtime = OVERTIME; if(OVERTIME > 0 && OVERTIME < 300) $overtime = 300; if(OVERTIME > 0) $this->check_admin_ontime($overtime); } if(!$this->check_priv()) { show_msg('maybe_permission_limit', 'stay', 1); } } public function check_group($cur_group_id) { return $cur_group_id <= 0 ? FALSE : TRUE; } public function check_priv() { $control = isset($_GET['mr_model']) ? $GLOBALS['QXDREAM']['MODEL'][$_GET['mr_model']]['model_name'] : $_GET['control']; if(isset($GLOBALS['QXDREAM']['MR'][$control]) && 1 == $GLOBALS['QXDREAM']['MR'][$control]['disabled']) { add_globals(array('mod' => $control)); show_msg('module_unenabled'); } if(isset($GLOBALS['QXDREAM']['qx_group_id']) && 1 == $GLOBALS['QXDREAM']['qx_group_id']) { return TRUE; } if(in_array($control, array('login', 'index', 'attachment'))) { return TRUE; } if(2 == $GLOBALS['QXDREAM']['qx_group_id'] && in_array($control, array('cache', 'setting', 'group', 'category', 'contentAll'))) { return TRUE; } if(isset($GLOBALS['QXDREAM']['MR'][$control]) && $GLOBALS['QXDREAM']['qx_company_id'] >= 1) { $mr_ids = 2 == $GLOBALS['QXDREAM']['qx_group_id'] ? $GLOBALS['QXDREAM']['COMPANY'][$GLOBALS['QXDREAM']['qx_company_id']]['mr_ids'] : $GLOBALS['QXDREAM']['USER_GROUP'][$GLOBALS['QXDREAM']['qx_group_id']]['mr_ids']; $mr_ids_data = explode(',', $mr_ids ); if(in_array($GLOBALS['QXDREAM']['MR'][$control]['mr_id'], $mr_ids_data)) { return TRUE; } if('user' == $control && 'edit' == $_GET['method']) { return TRUE; } } return FALSE; } public function check_admin_ontime($long = 3600) { $timestamp = $GLOBALS['QXDREAM']['timestamp']; $online_time = $_SESSION['ontime']; if ($timestamp - $online_time > $long) { session_destroy(); show_msg('OT', app_url() . '/login/'); } else { $_SESSION['ontime'] = $timestamp; } } public function login($user_name, $user_pass, $id_code, $enable_id_code = TRUE, $cookie_time = 0) { $data = ''; $sql = "SELECT `user_id`,`company_id`,`user_name`,`user_pass`,`salt`,`group_id`,`login_count`,`disabled` FROM {$this->user_table} WHERE `user_name`='{$user_name}'"; $data = $this->fetch($sql); if(!is_array($data)) { $this->msg = 'uncorrect_user_name'; $this->error_type = 1; return FALSE; } $create_pass = $this->create_pass($user_pass, $data['salt']); if($data['user_pass'] != $create_pass) { $this->msg = 'uncorrect_user_pass'; $this->error_type = 2; return FALSE; } if(isset($data['id_code']) && !check_code($id_code, $enable_id_code)) { $this->msg = 'uncorrect_id_code'; $this->error_type = 3; return FALSE; } $user_id = $data['user_id']; $group_id = $data['group_id']; $login_count = $data['login_count'] + 1; $hash = md5(md5(QX_KEY) . $user_id . $group_id . $user_name); $time = 0; $time = get_cookie('cookie_time'); $cookie_time = empty($time) ? $cookie_time : $time; set_cookie('hash', auth_code($hash), $cookie_time); set_cookie('qx_auth', auth_code("{$user_id}\t{$create_pass}\t{$login_count}"), $cookie_time); set_cookie('cookie_time', $cookie_time); $this->query("UPDATE {$this->user_table} SET `login_count`='{$login_count}',`login_ip`='{$GLOBALS['QXDREAM']['online_ip']}',`login_time`='{$GLOBALS['QXDREAM']['timestamp']}' WHERE `user_id`='{$user_id}'"); return $data; } private function salt($num = 4) { if($num < 4 || $num > 16) $num = 4; return substr(uniqid(rand()), -$num); } public function create_pass($input_pass, $salt) { return md5(md5($input_pass) . $salt); } public function logout() { if(isset($_SESSION)) session_destroy(); clear_cookie(array('hash', 'qx_auth', 'cookie_time')); return TRUE; } public function add($data) { $data['salt'] = $this->salt(); $data['user_pass'] = $this->create_pass($data['user_pass'], $data['salt']); unset($data['password_again']); return $this->insert($this->user_table, $data); } public function edit($data, $user_id, $company_id = 0) { if(!empty($data['user_pass']) && !empty($data['password_again'])) { $data['salt'] = $this->salt(); $data['user_pass'] = $this->create_pass($data['user_pass'], $data['salt']); } else { unset($data['user_pass']); } unset($data['password_again']); $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; return $this->update($this->user_table, $data, "user_id='" . $user_id . "'" . $where); } public function check_addinfo($data, $enable_id_code = FALSE) { if(check_badword($data['user_name'])) { $this->msg = 'user_name_has_badword'; return FALSE; } if(strlen($data['user_name']) > 30) { $this->msg = 'user_name_not_beyond_30_len'; return FALSE; } $user_data = ''; $sql = "SELECT `user_id` FROM {$this->user_table} WHERE `user_name`='{$data['user_name']}'"; $user_data = $this->fetch($sql); if(is_array($user_data)) { $this->msg = 'user_name_has_used'; return FALSE; } if(!empty($data['user_pass']) && !empty($data['password_again'])) { if(check_badword($data['user_pass'], array('"',"'"))) { $this->msg = 'user_pass_has_badword'; return FALSE; } if($data['user_pass'] != $data['password_again']) { $this->msg = 'password_not_same'; return FALSE; } } if(isset($data['id_code']) && !check_code($data['id_code'], $enable_id_code)) { $this->msg = 'uncorrect_id_code'; return FALSE; } return TRUE; } public function check_editinfo($data) { if(check_badword($data['user_pass'], array('"',"'"))) { $this->msg = 'user_pass_has_badword'; return FALSE; } if($data['user_pass'] != $data['password_again']) { $this->msg = 'password_not_same'; return FALSE; } return TRUE; } public function get_one($user_id, $company_id = 0) { $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; return $this->fetch("SELECT `user_id`,`user_name`,`company_id`,`user_pass`,`salt`,`group_id`,`login_count`,`login_ip`,`login_time`,`content_count`,`disabled` FROM `{$this -> user_table}` WHERE `user_id`='{$user_id}'" . $where); } public function list_info($company_id = NULL, $disable = 'all') { $where = ''; $has_where = FALSE; if(NULL !== $company_id) { $has_where = append_where($where, $has_where, "company_id='{$company_id}'"); } if('all' != $disable) { $has_where = append_where($where, $has_where, "disabled='{$disable}'"); } $this->count("SELECT COUNT(*) FROM " . $this->user_table . $where); $sql = "SELECT `user_id`,`user_name`,`company_id`,`group_id`,`login_count`,`login_ip`,`login_time`,`content_count`,`disabled` FROM `{$this->user_table}`{$where} ORDER BY `user_id` DESC" . $this->pagenation->sql_limit(); $query = $this->query($sql, 'unbuffered'); $data = array(); while($row = $this->fetch_array($query)) { $row['role'] = get_role_name($row['group_id']); $row['company_name'] = isset($GLOBALS['QXDREAM']['COMPANY'][$row['company_id']]['company_name']) ? $GLOBALS['QXDREAM']['COMPANY'][$row['company_id']]['company_name'] : $GLOBALS['QXDREAM']['admin_language']['none']; $row['login_ip'] = empty($row['login_ip']) ? $GLOBALS['QXDREAM']['language']['never_login'] : $row['login_ip']; $row['login_time'] = empty($row['login_time']) ? $GLOBALS['QXDREAM']['language']['never_login'] : format_date('Y-m-d H:iA', $row['login_time']); unset($row['group_id']); $data[] = $row; } $this->free_result($query); return $data; } public function disable($user_id, $disabled_value, $company_id = 0) { $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; $this->update($this->user_table, array('disabled' => $disabled_value), "user_id='" . $user_id . "'" . $where); return TRUE; } public function batch_disable($user_id_arr, $disabled_value, $company_id = 0) { $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; $user_id_all = implode(',', $user_id_arr); $this->update("{$this->user_table}", array('disabled' => $disabled_value), "user_id IN({$user_id_all})" . $where); return $this->affected_rows() > 0 ? TRUE : FALSE; } public function remove($user_id, $company_id = 0) { $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; $this->delete("{$this->user_table}", "user_id='{$user_id}'" . $where); return $this->affected_rows() > 0 ? TRUE : FALSE; } public function batch_remove($user_id_arr, $company_id = 0) { $where = empty($company_id) ? '' : " AND company_id='" . $company_id . "'"; $user_id_all = implode(',', $user_id_arr); $this->delete("{$this->user_table}", "user_id IN({$user_id_all})" . $where); return $this->affected_rows() > 0 ? TRUE : FALSE; } public function get_guide($company_id = 0) { $where = empty($company_id) ? '' : " WHERE company_id='" . $company_id . "'"; $sql = "SELECT COUNT(*) AS count,disabled AS link_val FROM $this->user_table{$where} GROUP BY disabled ORDER BY user_id"; $query = $this->query($sql, 'unbuffered'); $data = array(); $total = 0; $data['all']['link_val'] = 'all'; $data['all']['text'] = $GLOBALS['QXDREAM']['admin_language']['all']; while($row = $this->fetch_array($query)) { $row['text'] = 0 == $row['link_val'] ? $GLOBALS['QXDREAM']['admin_language']['enable'] : $GLOBALS['QXDREAM']['admin_language']['disable']; $total += $row['count']; $data[$row['link_val']] = $row; } $data['all']['count'] = $total; return $data; } } ?>